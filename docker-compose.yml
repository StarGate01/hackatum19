version: '3'

networks:
  app:

volumes:
  postgres-data:
    driver: local

services:
  portainer:
    image: "portainer/portainer:latest"
    command: -H unix:///var/run/docker.sock --no-auth
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:rw
      - ./persistent-data/portainer:/data:rw
    environment:
      - CAP_HOST_MANAGEMENT=1
    ports:
      - "9201:9000"

  db:
    image: "postgres:latest"
    restart: always
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/create-multiple-postgresql-databases.sh:/docker-entrypoint-initdb.d/create-multiple-postgresql-databases.sh:ro
    environment:
      - POSTGRES_USER=dbuser
      - POSTGRES_PASSWORD=dbpass
      - POSTGRES_MULTIPLE_DATABASES=mattermost,app
    expose:
      - "5432"
    networks:
      - app

  pgadmin:
    image: "dpage/pgadmin4:latest"
    restart: always
    depends_on:
      - db
    environment:
      PGADMIN_DEFAULT_EMAIL: pguser
      PGADMIN_DEFAULT_PASSWORD: pgpass
    volumes:
       - ./persistent-data/pgadmin:/root/.pgadmin
    ports:
      - "9202:80"
    networks:
      - app

  mattermost-app:
    build:
      context: mattermost-app
      args:
        - edition=team
    restart: always
    depends_on:
      - db
    volumes:
      - ./persistent-data/mattermost/app/mattermost/config:/mattermost/config:rw
      - ./persistent-data/mattermost/app/mattermost/data:/mattermost/data:rw
      - ./persistent-data/mattermost/app/mattermost/logs:/mattermost/logs:rw
      - ./persistent-data/mattermost/app/mattermost/plugins:/mattermost/plugins:rw
      - ./persistent-data/mattermost/app/mattermost/client-plugins:/mattermost/client/plugins:rw
    environment:
      - MM_USERNAME=dbuser
      - MM_PASSWORD=dbpass
      - MM_DBNAME=mattermost
      - MM_SQLSETTINGS_DATASOURCE=postgres://dbuser:dbpass@db:5432/mattermost?sslmode=disable&connect_timeout=10
    expose:
      - "8000"
    networks:
      - app

  mattermost-web:
    build: mattermost-web
    restart: always
    depends_on:
      - mattermost-app
    environment:
      - MATTERMOST_ENABLE_SSL=false
      - APP_HOST=mattermost-app
    ports:
      - "9200:80"
    networks:
      - app

  mattermost-connector:
    image: "golang:alpine"
    restart: always
    depends_on:
      - mattermost-web
    volumes:
      - ./mattermost-connector:/go/src/mattermost-connector
    working_dir: /go/src/mattermost-connector
    command: sh -c "go run *.go"
    ports:
      - "9999:80"
    expose:
      - "80"
    networks:
      - app

  imgserver:
    image: "nginx:latest"
    restart: always
    volumes:
      - ./imgserver/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./persistent-data/images:/etc/nginx/htdocs:ro
    ports:
      - "9203:80"
    networks:
      - app
      
  ai:
    build: ./ai/app
    restart: always
    expose:
      - "5000"
    volumes:
      - ./ai/app:/code:rw
      - ./persistent-data/images:/data/images:ro
    ports:
      - "8001:5000"
    networks:
      - app

  camera:
    build: ./camera
    restart: always
    volumes:
      - ./camera/main.py:/code/main.py:ro
      - ./persistent-data/mock:/data/mock:ro
    networks:
      - app

  core:
    build: ./node-backend
    restart: always
    depends_on:
      - mattermost-connector
    volumes:
      - ./node-backend/src:/app/src:ro
      - ./persistent-data/images:/data/images:rw
    environment:
      - IMGDIR=/data/images
      - MATTERMOST=mattermost-connector
      - MATTERMOST_PORT=80
      - AI=ai
      - AI_PORT=5000
      - DB=db
      - DB_USER=dbuser
      - DB_PASS=dbpass
      - DB_DB=app
      - PORT=3000
    ports:
      - "8888:3000"
    expose:
      - "3000"
    networks:
      - app
      